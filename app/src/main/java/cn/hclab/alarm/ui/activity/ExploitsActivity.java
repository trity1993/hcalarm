package cn.hclab.alarm.ui.activity;

import android.app.AlertDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import org.json.JSONObject;

import java.util.Map;

import cc.trity.common.Common;
import cc.trity.model.entities.AlarmUserInfo;
import cn.hclab.alarm.R;
import cn.hclab.alarm.ui.HcAlarmApp;
import cn.hclab.alarm.utils.GsonTools;
import cn.hclab.alarm.utils.Tools;
import me.imid.swipebacklayout.lib.app.SwipeBackActivity;

public class ExploitsActivity extends SwipeBackActivity implements
		OnClickListener {
	private ImageButton ibEditMsg, ivSex;
	private ImageView ivHead;
	private TextView tvNickName, tvNeedPoints, tvNo;
	private HcAlarmApp hcAlarmApp;
	private AlarmUserInfo userInfo;
	private AlertDialog mAlertDialog;
	private final int USERINFO_NEEDPOINTS = 0;
	private final int USERINFO_NO = 1;
	private final int INIT_IMAGE = 2;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_exploits);
		hcAlarmApp = (HcAlarmApp) getApplication();
		initView();
	}

	public void initView() {
		ibEditMsg = (ImageButton) findViewById(R.id.exploits_ib_edit);
		ivHead = (ImageView) findViewById(R.id.exploit_iv_head);
		ivSex = (ImageButton) findViewById(R.id.exploits_ib_sex);
		tvNickName = (TextView) findViewById(R.id.exploits_tv_name);
		tvNeedPoints = (TextView) findViewById(R.id.exploit_tv_needpoints);
		tvNo = (TextView) findViewById(R.id.exploit_tv_no);

		// 设置信息:
		userInfo = hcAlarmApp.getUserInfo();
		// 设置头像
		if (userInfo.getHead() != null){
			new Thread(new Runnable() {
				@Override
				public void run() {
					Bitmap bitmap=Tools.getbitmap(hcAlarmApp.getUserInfo().getHead());

					bitmap=Tools.getCroppedBitmap(bitmap, Common.BITMAP_RADIUS,getResources().getColor(R.color.blue_bottom));
					Message msg=new Message();
					msg.what=INIT_IMAGE;
					msg.obj=bitmap;
					mHandler.sendMessage(msg);

				}
			}).start();
		}
			mHandler.sendEmptyMessage(INIT_IMAGE);
		// 默认是男的
		if (userInfo.getSex() != null && userInfo.getSex().equals("女")) {
			ivSex.setImageResource(R.drawable.weman_icon);
		}
		if (userInfo.getNickName() != null)
			tvNickName.setText(userInfo.getNickName());
		// 得到加载框
		mAlertDialog = Tools.CommonProgressDialog(ExploitsActivity.this);
		// 加载分数和排名
		mHandler.sendEmptyMessage(USERINFO_NEEDPOINTS);
		ibEditMsg.setOnClickListener(this);
	}

	private Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case USERINFO_NEEDPOINTS:

				break;
			case USERINFO_NO:
				getNo();
				break;
				case INIT_IMAGE:

					ivHead.setImageBitmap((Bitmap)msg.obj);
					break;
			default:
				break;
			}
		};
	};


	public void responseNeedPoints(JSONObject response) {
		Map<String, Object> map = GsonTools.getMap(response.toString());
		// for (String key : map.keySet()) {
		// Log.e("map","key:" + key + " values:" + map.get(key));
		// }
		if (((Double) map.get("state")).intValue() == 1) {
			String strData = GsonTools.createGsonString(map.get("data"));
			// Log.e("data",strData.toString());
			AlarmUserInfo mUserInfo = GsonTools.getClass(strData, AlarmUserInfo.class);
			// 存储
			AlarmUserInfo hcUserInfo = hcAlarmApp.getUserInfo();
//			hcUserInfo.setNeedPoints(mUserInfo.getNeedPoints());
			hcAlarmApp.setUserInfo(hcUserInfo);
			// 更改UI
//			tvNeedPoints.setText(mUserInfo.getNeedPoints() + "");
		} else {
			tvNeedPoints.setText(R.string.record_null);
		}
	}


	/*
	 * 得到当周排名
	 */
	public void getNo() {
		AlarmUserInfo userInfo = new AlarmUserInfo();
//		userInfo.setPhoneNum(hcAlarmApp.getUserInfoId());

//		mQueue = Volley.newRequestQueue(getApplicationContext());
//		JsonObjectRequest req = getPostNORequest(Common.GET_BEST_RECORD_NO,
//				userInfo);
//		mQueue.add(req);
	}

	public void responseNO(JSONObject response) {
		Map<String, Object> map = GsonTools.getMap(response.toString());
		// for (String key : map.keySet()) {
		// Log.e("map","key:" + key + " values:" + map.get(key));
		// }
		if (((Double) map.get("state")).intValue() == 1) {
			String strData = GsonTools.createGsonString(map.get("data"));
			// Log.e("data",strData.toString());
			AlarmUserInfo mUserInfo = GsonTools.getClass(strData, AlarmUserInfo.class);
			// 存储
			AlarmUserInfo hcUserInfo = hcAlarmApp.getUserInfo();
//			hcUserInfo.setNO(mUserInfo.getNO());
			hcAlarmApp.setUserInfo(hcUserInfo);
			// 更改UI
//			tvNo.setText("第" + (int) mUserInfo.getNO() + "名");
		} else {
			tvNo.setText(R.string.record_null);
		}
	}

	@Override
	public void onClick(View view) {
		switch (view.getId()) {
		case R.id.exploits_ib_edit:
			startActivity(new Intent(ExploitsActivity.this,
					InfoEditActivity.class));
			break;

		default:
			break;
		}

	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		hcAlarmApp.saveUserInfo(hcAlarmApp.getUserInfo());
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
		super.onSaveInstanceState(outState);
		hcAlarmApp.saveUserInfo(hcAlarmApp.getUserInfo());
	}
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}
}
